// Code generated by MockGen. DO NOT EDIT.
// Source: pdn/signal/coordinator (interfaces: Coordinator)

// Package coordinator is a generated GoMock package.
package coordinator

import (
	socket "pdn/signal/controller/socket"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCoordinator is a mock of Coordinator interface.
type MockCoordinator struct {
	ctrl     *gomock.Controller
	recorder *MockCoordinatorMockRecorder
}

// MockCoordinatorMockRecorder is the mock recorder for MockCoordinator.
type MockCoordinatorMockRecorder struct {
	mock *MockCoordinator
}

// NewMockCoordinator creates a new mock instance.
func NewMockCoordinator(ctrl *gomock.Controller) *MockCoordinator {
	mock := &MockCoordinator{ctrl: ctrl}
	mock.recorder = &MockCoordinatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordinator) EXPECT() *MockCoordinatorMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockCoordinator) Activate(arg0, arg1 string, arg2 socket.Socket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockCoordinatorMockRecorder) AddUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockCoordinator)(nil).Activate), arg0, arg1, arg2)
}

// Remove mocks base method.
func (m *MockCoordinator) Remove(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockCoordinatorMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCoordinator)(nil).Remove), arg0, arg1)
}

// RequestResponse mocks base method.
func (m *MockCoordinator) RequestResponse(arg0, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestResponse", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestResponse indicates an expected call of RequestResponse.
func (mr *MockCoordinatorMockRecorder) RequestResponse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestResponse", reflect.TypeOf((*MockCoordinator)(nil).RequestResponse), arg0, arg1, arg2)
}

// Response mocks base method.
func (m *MockCoordinator) Response(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Response", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Response indicates an expected call of Response.
func (mr *MockCoordinatorMockRecorder) Response(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockCoordinator)(nil).Response), arg0, arg1, arg2)
}
