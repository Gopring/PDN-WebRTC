// Code generated by MockGen. DO NOT EDIT.
// Source: pdn/signal/signaling (interfaces: Signal)

// Package signaling is a generated GoMock package.
package signaling

import (
	request "pdn/types/api/request"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSignal is a mock of Signal interface.
type MockSignal struct {
	ctrl     *gomock.Controller
	recorder *MockSignalMockRecorder
}

// MockSignalMockRecorder is the mock recorder for MockSignal.
type MockSignalMockRecorder struct {
	mock *MockSignal
}

// NewMockSignal creates a new mock instance.
func NewMockSignal(ctrl *gomock.Controller) *MockSignal {
	mock := &MockSignal{ctrl: ctrl}
	mock.recorder = &MockSignalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignal) EXPECT() *MockSignalMockRecorder {
	return m.recorder
}

// Arrange mocks base method.
func (m *MockSignal) Arrange(arg0 request.Signal) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Arrange", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Arrange indicates an expected call of Arrange.
func (mr *MockSignalMockRecorder) Arrange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Arrange", reflect.TypeOf((*MockSignal)(nil).Arrange), arg0)
}

// Fetch mocks base method.
func (m *MockSignal) Fetch(arg0 request.Signal) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockSignalMockRecorder) Fetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockSignal)(nil).Fetch), arg0)
}

// Forward mocks base method.
func (m *MockSignal) Forward(arg0 request.Signal) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Forward", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Forward indicates an expected call of Forward.
func (mr *MockSignalMockRecorder) Forward(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forward", reflect.TypeOf((*MockSignal)(nil).Forward), arg0)
}

// Receive mocks base method.
func (m *MockSignal) Receive(arg0 request.Signal) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockSignalMockRecorder) Receive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockSignal)(nil).Receive), arg0)
}

// Reconnect mocks base method.
func (m *MockSignal) Reconnect(arg0 request.Signal) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconnect", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reconnect indicates an expected call of Reconnect.
func (mr *MockSignalMockRecorder) Reconnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconnect", reflect.TypeOf((*MockSignal)(nil).Reconnect), arg0)
}

// Send mocks base method.
func (m *MockSignal) Send(arg0 request.Signal) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockSignalMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSignal)(nil).Send), arg0)
}
