// Code generated by MockGen. DO NOT EDIT.
// Source: pdn/signal/controller/socket (interfaces: Socket)

// Package socket is a generated GoMock package.
package socket

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSocket is a mock of Socket interface.
type MockSocket struct {
	ctrl     *gomock.Controller
	recorder *MockSocketMockRecorder
}

// MockSocketMockRecorder is the mock recorder for MockSocket.
type MockSocketMockRecorder struct {
	mock *MockSocket
}

// NewMockSocket creates a new mock instance.
func NewMockSocket(ctrl *gomock.Controller) *MockSocket {
	mock := &MockSocket{ctrl: ctrl}
	mock.recorder = &MockSocketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSocket) EXPECT() *MockSocketMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSocket) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSocketMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSocket)(nil).Close))
}

// Read mocks base method.
func (m *MockSocket) Read(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockSocketMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSocket)(nil).Read), arg0)
}

// Write mocks base method.
func (m *MockSocket) Write(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockSocketMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSocket)(nil).Write), arg0)
}
